using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

public class Enemy : MonoBehaviour {

    [SerializeField]
    Projectile missilePrefab;
    [SerializeField]
    private AudioClip deathSound;
    [SerializeField]
    private AudioClip fireSound;
    [SerializeField]
    private AudioClip painSound;
    
    public int health;
    
    public int range;
    public int fireRange;

    public Animator soldierAnimations;

    public float fireRate;
    public ParticleSystem deathGFX;
    public ParticleSystem painGFX;
    public ParticleSystem muzzleFlash;

    public int damage;

    public Transform weapon;
    NavMeshAgent agent;
    
    private Transform player;
    private GameObject target;
    private float timeLastFired;

    private bool isDead;
    //if has been attacked, should chase player forever
    private bool hasBeenAttacked;

    //if is alerted to you
    //todo: add implementation
    private bool alerted;

    // Use this for initialization
    void Start () {
        isDead = false;
        hasBeenAttacked = false;
        agent = GetComponent<UnityEngine.AI.NavMeshAgent>();
        player = GameObject.FindGameObjectWithTag("Player").transform;
	}
	
	// Update is called once per frame
	void Update () {
		if (isDead)
        {
            return;
        }
               

        //if the player is close enough, hunt for them, OR if has been attacked and the two of you are not on top of each other
        if ((Vector3.Distance(transform.position, player.position) < range && Vector3.Distance(transform.position, player.position) > 3) || (alerted && Vector3.Distance(transform.position, player.position) > 3))
        {
            transform.LookAt(player);
            alerted = true;
            soldierAnimations.Play("Run");
            agent.SetDestination(player.position);
        }

        //
        if (Vector3.Distance(transform.position, player.position) <= 3)
        {
            soldierAnimations.Play("Idle");
            agent.isStopped = true;
        }

        if (Vector3.Distance(transform.position, player.position) < fireRange - 5 && Time.time - timeLastFired > fireRate && alerted)
        {
            //6
            Debug.Log("Stopping and shooting my gun.");
            //agent.isStopped = true;
            timeLastFired = Time.time;
            fire();
        }
    }

    void fire()
    {
        //target = GameObject.Find("Player");

        //Vector3 direction = target.transform.position - transform.position;
        //Ray ray = new Ray(transform.position, direction);
        //RaycastHit hit;

        //Debug.DrawRay(transform.position, direction, Color.red);

        //if (Physics.Raycast(ray, out hit, fireRange))
        //{
        //    Projectile missile = Instantiate(missilePrefab);
        //    missile.transform.position = weapon.transform.position;
        //    missile.transform.rotation = weapon.transform.rotation;

        //    Instantiate(muzzleFlash, weapon.transform.position, Quaternion.identity);
        //    soldierAnimations.Play("Fire");
        //    GetComponent<AudioSource>().PlayOneShot(fireSound);
        //    //processHit(hit.collider.gameObject, hit);
        //}

        target = GameObject.Find("Player");

        Vector3 direction = target.transform.position - transform.position;
        Ray ray = new Ray(transform.position, direction);
        RaycastHit hit;


        Debug.DrawRay(transform.position, direction, Color.red);

        if (Physics.Raycast(ray, out hit, fireRange))
        {
            processHit(hit.collider.gameObject, hit);
        }


        Instantiate(muzzleFlash, weapon.transform.position, Quaternion.identity);
        soldierAnimations.Play("Fire");
        GetComponent<AudioSource>().PlayOneShot(fireSound);


    }

    private void processHit(GameObject hitObject, RaycastHit location)
    {
        Debug.Log(hitObject.name + " was hit.");

        //this section should be using a fucking interface but i need to look in that more

        if (hitObject.GetComponent<Enemy>() != null)
        {
            hitObject.GetComponent<Enemy>().TakeDamage(damage);
            Instantiate(hitObject.GetComponent<Enemy>().painGFX, location.point, Quaternion.identity);
        }

        if (hitObject.GetComponent<Player>() != null)
        {
            hitObject.GetComponent<Player>().TakeDamage(damage);
        }

        if (hitObject.GetComponent<Civilian>() != null)
        {
            hitObject.GetComponent<Civilian>().PlayOuch();
            Instantiate(hitObject.GetComponent<Civilian>().painGFX, location.point, Quaternion.identity);
        }

        if (hitObject.GetComponent<ExplosiveBarrel>() != null)
        {
            Debug.Log("Explosive barrel got hit.");
            hitObject.GetComponent<ExplosiveBarrel>().TakeDamage(damage);
        }
        
    }

    public void TakeDamage(int amount)
    {
        alerted = true;

        if (isDead)
        {
            return;
        }

        health -= amount;

        if (health <= 0)
        {
            isDead = true;

            GetComponent<AudioSource>().PlayOneShot(deathSound);
            Instantiate(deathGFX, transform.position, Quaternion.identity);
            Destroy(gameObject);
        }
        else
        {
            GetComponent<AudioSource>().PlayOneShot(painSound);
        }
    }

    //IEnumerator Death()
    //{
    //    ////roblox.enabled = false;
    //    //Instantiate(deathGFX, transform.position, Quaternion.identity);
    //    //yield return new WaitForSeconds(1.5f);
    //    //Destroy(gameObject);
    //}
}
